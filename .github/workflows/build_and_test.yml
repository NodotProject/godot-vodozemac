name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GODOT_VERSION: "4.5"
  SCONS_CACHE_LIMIT: 7168

jobs:
  # Static analysis and formatting checks
  static-analysis:
    runs-on: ubuntu-latest
    name: Static Analysis

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Run Clippy
        run: |
          cd vodozemac-ffi/cpp
          cargo clippy -- -D warnings

      - name: Check formatting
        run: |
          cd vodozemac-ffi/cpp
          cargo fmt -- --check

  # Rust unit tests
  rust-tests:
    runs-on: ubuntu-latest
    name: Rust Unit Tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            vodozemac-ffi/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Rust tests
        run: |
          cd vodozemac-ffi/cpp
          cargo test --verbose

  # Build for Linux
  build-linux:
    runs-on: ubuntu-latest
    name: Build Linux (x86_64)
    needs: [static-analysis, rust-tests]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential scons pkg-config libssl-dev clang

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup SCons cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.scons-cache/
            ~/.cargo/registry
            ~/.cargo/git
            vodozemac-ffi/target
          key: ${{ runner.os }}-scons-${{ hashFiles('**/*.cpp', '**/*.h', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-scons-

      - name: Build vodozemac-ffi
        run: |
          cd vodozemac-ffi/cpp
          cargo build --release
          cd ../..

      - name: Build godot-cpp
        run: |
          cd godot-cpp
          scons platform=linux target=template_release -j$(nproc)
          cd ..

      - name: Build GDExtension
        run: |
          scons platform=linux target=template_release -j$(nproc)

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: libgodot-vodozemac-linux-x86_64
          path: addons/godot-vodozemac/bin/libgodot-vodozemac.so
          retention-days: 7

  # GDScript integration tests
  gdscript-tests:
    runs-on: ubuntu-latest
    name: GDScript Integration Tests
    needs: build-linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential scons pkg-config libssl-dev clang \
            libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev \
            libglu1-mesa-dev libasound2-dev libpulse-dev libudev-dev \
            libxi-dev libxrandr-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup build cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.scons-cache/
            ~/.cargo/registry
            ~/.cargo/git
            vodozemac-ffi/target
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.cpp', '**/*.h', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install GUT
        run: |
          git clone https://github.com/bitwes/Gut.git gut_temp
          mv gut_temp/addons/gut addons/
          rm -rf gut_temp

      - name: Build vodozemac-ffi
        run: |
          cd vodozemac-ffi/cpp
          cargo build --release
          cd ../..

      - name: Build godot-cpp
        run: |
          cd godot-cpp
          scons platform=linux target=template_release -j$(nproc)
          cd ..

      - name: Build GDExtension
        run: |
          scons platform=linux target=template_release -j$(nproc)

      - name: Import project
        run: |
          timeout 60 godot --headless --editor --quit || true

      - name: Run GUT tests
        run: |
          godot --headless -s addons/gut/gut_cmdln.gd -gdir=res://tests/integration -gexit

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            .gut/
            *.log
          retention-days: 7

  # Optional: Memory leak detection with Valgrind
  memory-check:
    runs-on: ubuntu-latest
    name: Memory Leak Check (Valgrind)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind build-essential scons pkg-config libssl-dev clang

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build with debug symbols
        run: |
          cd vodozemac-ffi/cpp
          cargo build
          cd ../..

      - name: Run Valgrind tests
        run: |
          cd vodozemac-ffi/cpp
          cargo test --no-run
          valgrind --leak-check=full --error-exitcode=1 \
            $(find target/debug/deps -maxdepth 1 -executable -type f | head -1) || true
